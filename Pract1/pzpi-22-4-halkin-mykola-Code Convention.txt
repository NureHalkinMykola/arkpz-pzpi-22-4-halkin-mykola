МІНІСТЕРСТВО ОСВІТИ ТА НАУКИ УКРАЇНИ

ХАРКІВСЬКИЙ НАЦІОНАЛЬНИЙ УНІВЕРСИТЕТ РАДІОЕЛЕКТРОНІКИ


Кафедра "Програмної інженерії"


ЗВІТ
з практичної роботи №1 
з дисципліни "Аналіз та рефакторінг коду" 
на тему "Правила оформлення програмного коду"




Виконав ст. гр. ПЗПІ-22-4
Галкін Микола Сергійович

Перевірив:
ст. викладач кафедри ПІ
Сокорчук Ігор Петрович







Харків 2024

МЕТА
     Ознайомитись з основними рекомендаціями щодо написання чистого, ефективного та підтримуваного коду для різних мов програмування, а також навчитися аналізувати та рефакторити код для покращення його якості.


ЗАВДАННЯ
     Необхідно обрати мову програмування, дослідити основні рекомендації для написання якісного коду у цій мові, продемонструвати ці рекомендації на прикладах коду, обґрунтувати кожну рекомендацію і надати детальні пояснення. Для кожного прикладу мають бути наведені фрагменти коду.

ХІД РОБОТИ
     Для роботи була обрана мова програмування Go. 
     Мова програмування Go (також відома як Golang) - проста в розумінні та функціоналі мова програмування. Вона призначена для швидкого написання коду для будь-якої цілі. Через це в неї багато відсутнього функціоналу відносно інших мов. 
     Розглянемо правила найменування функцій, перемінних та структур. 
     Рекомендація: Для стилізації програмного коду використовується Gofmt.
     Опис: Завдяки цьому інструменту програміст не повинен турбуватися про невеликі помилки форматування. Також весь код написаний на Go різними людьми буде сформатований однаково. Завдяки чому не виникає проблем у розумінні написаного коду.
     
     Рекомендація: Всі найменування повинні мати назву, яка відображає їх значення. 
     Опис: Це потрібно щоб можна було легко зрозуміти для чого саме вони призначені. Таким чином новий програміст може скоріше зрозуміти що саме робить написаний код. 
     Приклад:
       // Поганий приклад
       func xsdds(a, b int) int {
        return a + b
       }
       
       // Гарний приклад
       func adder(n1, n2 int) int {
        return n1 + n2
       }
     
     Рекомендація:  Дотримуватись особливості написання першої літери назви найменування.
     Опис:  Якщо потрібно використовувати змінну або функцію в іншому проекті, її назву необхідно написати з великої літери. Якщо змінна або функція використовується в теперішньому проекті, то перша літера маленька.
     Приклад:
       // Для цього проекту
       func boolToInt(in bool) int {
        if in {
         return 1
        } else {
         return 0
        }
       }
       
       // Для різних проектів
       func BoolToInt(in bool) int {
        if in {
         return 1
        } else {
         return 0
        }
       }
     
     Рекомендація:  Дотримуватись вірного стилю найменування змінних або функцій з декількома словами.
     Опис:  Якщо найменування містить в собі декілька слів, то кожна перша літера нового слова є великою. Таким чином дуже покращується читабельність коду.
     Приклад:
       // Поганий приклад
       func inttobool(in int) bool {
        if in > 0 {
         return true
        } else {
         return false
        }
       }
       
       // Гарний приклад
       func intToBool(in int) bool {
        if in > 0 {
         return true
        } else {
         return false
        }
       }
     
     Рекомендація:  Дотримуватись вірного найменування змінних в дуже обмежених сферах застосування.
     Опис:  Якщо змінна використовується один раз в дуже обмеженій сфері застосування (наприклад у циклі) використовуються назви з однієї - двох літер.
     Приклад:
       // Поганий приклад
       func iteratorBad(numberOfTimes int) {
        for currentTime := 0; currentTime < numberOfTimes; currentTime++ {
         println(currentTime)
        }
       }
       
       // Гарний приклад
       func iteratorGood(n int) {
        for i := 0; i < n; i++ {
         println(i)
        }
       }
     
     Рекомендація:  Не використовувати незрозумілі числа в коді.
     Опис:  Коли програміст пише якусь формулу необхідно щоб вона повністю складалась із змінних, таким чином відразу зрозуміло з чого складається формула.
     Приклад:
       // Поганий приклад
        println("Current speed in free fall:", 20*9.8)
       
        // Гарний приклад
        time := 20.0
        acceleration := 9.8
        speed := time * acceleration
        println("Current speed in free fall:", speed)
     
     Рекомендація: Уникати однаковий код. 
     Опис: Якщо ідентичний код використовується в декількох частинах програми, його слідує винести в окрему функцію.
     Приклад:
       // Поганий приклад
        n1 := 20
        n2 := 15
       
        if n1%2 == 0 {
         println(n1, "is even")
        } else {
         println(n1, "is odd")
        }
        if n2%2 == 0 {
         println(n2, "is even")
        } else {
         println(n2, "is odd")
        }
       
       // Гарний приклад
        checkEven(n1)
        checkEven(n2)
       }
       
       func checkEven(n int) {
        if n%2 == 0 {
         println(n, "is even")
        } else {
         println(n, "is odd")
        }
       }
     
     Рекомендація:  Використовувати типи даних error при обробці помилок.
     Опис:  Щоб вірно виправляти помилки, необхідно використовувати тип даних error, який повертається після неуспішного виконання функції.
     Приклад:
       func divider(num1, num2 float32) (float32, error) {
        if num2 == 0 {
         return 0, fmt.Errorf("cannot divide by zero")
        }
       
        return num1 / num2, nil
       }
     
     Рекомендація: Коли функція виділяє комп'ютерні ресурси замість команди return використовувати defer(). 
     Опис: Це потрібно щоб автоматично почистити будь які додаткові використані ресурси при виході з функції. Функція defer() відкладає виконання функції поки навколишні функції не завершаться. 
     Приклад:
       // Поганий приклад
       func readFileBad() {
        file, err := os.Open("file.txt")
        if err != nil {
         log.Fatal(err)
        }
        file.Close()
       }
       
       // Гарний приклад
       func readFileGood() {
        file, err := os.Open("file.txt")
        if err != nil {
         log.Fatal(err)
        }
        defer file.Close()
       }
     
     Рекомендація: Для прискорення часу виконання програми використовувати Goroutines. 
     Опис: Goroutines дозволяє виконувати декілька функцій одночасно. Таким чином прискорюється виконання програм. 
     Приклад:
       // Поганий приклад
        n1 = 10
        for i := 0; i < n1; i++ {
         adder(i, i+1)
        }
       
        // Гарний приклад
        n1 = 10
        for i := 0; i < n1; i++ {
         go adder(i, i+1)
        }
     

ВИСНОВКИ
     
     Після проведення практичної роботи помітно що мова Go має не дуже багато серйозних правил або рекомендацій. Більшість рекомендацій направлені на поліпшення читабельності коду, в основному шляхом облегшення коду.
     Відеозвіт - https://www.youtube.com/watch?v=j4yd2SLJZNA 
     
      
ДОДАТОК А
     Презентація
